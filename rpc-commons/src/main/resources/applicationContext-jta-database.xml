<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" 
		xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
		xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd"
>

	<description>数据库配置--分布式事务</description>

    <context:annotation-config />  
    
	<!-- 引入多个配置文件交给spring管理-->
	<bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:druid.properties</value>
                <value>classpath:application.properties</value>
            </list>
        </property>
    </bean>
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"></property>
    </bean>
	
	<!-- atomikoDatasource -->
	<bean id="dataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean"
        init-method="init" destroy-method="close">
        <property name="uniqueResourceName" value="cas_sso" />
		<!--<property name="xaDataSourceClassName" value="${jdbc.driverClassName}" /> -->
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
        <property name="xaProperties">
            <props>
                <prop key="URL">${url}</prop>
                <prop key="user">${username}</prop>
                <prop key="password">${password}</prop>
            </props>
        </property>
		<!--#连接池中保留的最小连接数 -->
        <property name="minPoolSize" value="5" />
		<!--#连接池中保留的最大连接数  -->
        <property name="maxPoolSize" value="20" />
		<!--#最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: -->
        <property name="maxIdleTime" value="60" />
        <property name="testQuery">
            <value>select 1</value>
        </property>
    </bean>
    
	
	<!-- MyBatis与Spring的整合-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.github.wangyi.commons.model" />
		<!-- 显式指定Mapper所有模块的文件夹下的所有映射文件 -->
		<property name="mapperLocations" value="classpath:/mybatis/*Mapper.xml" />
	</bean>
	
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的接口,自动实现dao接口，并注入到spring容器中-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.github.wangyi.commons.dao" />
		<property name="annotationClass" value="com.github.wangyi.commons.db.mybatis.MyBatisRepository"/>
		<property name="sqlSessionFactoryBeanName"  value="sqlSessionFactory"/>
		<!-- <property name="plugins">
            <array>
               	 关于分页插件的使用说明：http://git.oschina.net/free/Mybatis_PageHelper/blob/master/wikis/HowToUse.markdown
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            offsetAsPageNum=true
                            rowBoundsWithCount=true
                            reasonable=true
                        </value>
                    </property>
                </bean>
            </array>
        </property> -->
    </bean>
    
    
    <!-- 启动AspectJ支持 -->  
    <aop:aspectj-autoproxy proxy-target-class="true"/> 
    
   <!-- jta分布式事务配置 -->
  	<bean id="userTransactionService" class="com.atomikos.icatch.config.UserTransactionServiceImp" init-method="init" destroy-method="shutdownForce">
        <constructor-arg>
            <props>
                <prop key="com.atomikos.icatch.service">com.atomikos.icatch.standalone.UserTransactionServiceFactory</prop>
            </props>
        </constructor-arg>
    </bean>

    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close" depends-on="userTransactionService">
        <property name="forceShutdown" value="false" />
    </bean>

    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp" depends-on="userTransactionService">
        <property name="transactionTimeout" value="300" />
    </bean>

    <bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager" depends-on="userTransactionService">
        <property name="transactionManager" ref="atomikosTransactionManager" />
        <property name="userTransaction" ref="atomikosUserTransaction" />
        <qualifier value="mq-jta-tx"/>
    </bean>

    <!-- 可通过注解控制事务，也可以配置拦截器方式配置事务 -->
    <tx:annotation-driven transaction-manager="jtaTransactionManager" />
    
</beans>