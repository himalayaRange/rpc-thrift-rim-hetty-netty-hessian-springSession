/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.wangyi.thrift.rpc.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-01")
public class Date implements org.apache.thrift.TBase<Date, Date._Fields>, java.io.Serializable, Cloneable, Comparable<Date> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Date");

  private static final org.apache.thrift.protocol.TField CACHED_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("cachedYear", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CACHED_FIXED_DATE_JAN1_FIELD_DESC = new org.apache.thrift.protocol.TField("cachedFixedDateJan1", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CACHED_FIXED_DATE_NEXT_JAN1_FIELD_DESC = new org.apache.thrift.protocol.TField("cachedFixedDateNextJan1", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DateTupleSchemeFactory());
  }

  public int cachedYear; // required
  public long cachedFixedDateJan1; // required
  public long cachedFixedDateNextJan1; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CACHED_YEAR((short)1, "cachedYear"),
    CACHED_FIXED_DATE_JAN1((short)2, "cachedFixedDateJan1"),
    CACHED_FIXED_DATE_NEXT_JAN1((short)3, "cachedFixedDateNextJan1");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CACHED_YEAR
          return CACHED_YEAR;
        case 2: // CACHED_FIXED_DATE_JAN1
          return CACHED_FIXED_DATE_JAN1;
        case 3: // CACHED_FIXED_DATE_NEXT_JAN1
          return CACHED_FIXED_DATE_NEXT_JAN1;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CACHEDYEAR_ISSET_ID = 0;
  private static final int __CACHEDFIXEDDATEJAN1_ISSET_ID = 1;
  private static final int __CACHEDFIXEDDATENEXTJAN1_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CACHED_YEAR, new org.apache.thrift.meta_data.FieldMetaData("cachedYear", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CACHED_FIXED_DATE_JAN1, new org.apache.thrift.meta_data.FieldMetaData("cachedFixedDateJan1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CACHED_FIXED_DATE_NEXT_JAN1, new org.apache.thrift.meta_data.FieldMetaData("cachedFixedDateNextJan1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Date.class, metaDataMap);
  }

  public Date() {
  }

  public Date(
    int cachedYear,
    long cachedFixedDateJan1,
    long cachedFixedDateNextJan1)
  {
    this();
    this.cachedYear = cachedYear;
    setCachedYearIsSet(true);
    this.cachedFixedDateJan1 = cachedFixedDateJan1;
    setCachedFixedDateJan1IsSet(true);
    this.cachedFixedDateNextJan1 = cachedFixedDateNextJan1;
    setCachedFixedDateNextJan1IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Date(Date other) {
    __isset_bitfield = other.__isset_bitfield;
    this.cachedYear = other.cachedYear;
    this.cachedFixedDateJan1 = other.cachedFixedDateJan1;
    this.cachedFixedDateNextJan1 = other.cachedFixedDateNextJan1;
  }

  public Date deepCopy() {
    return new Date(this);
  }

  @Override
  public void clear() {
    setCachedYearIsSet(false);
    this.cachedYear = 0;
    setCachedFixedDateJan1IsSet(false);
    this.cachedFixedDateJan1 = 0;
    setCachedFixedDateNextJan1IsSet(false);
    this.cachedFixedDateNextJan1 = 0;
  }

  public int getCachedYear() {
    return this.cachedYear;
  }

  public Date setCachedYear(int cachedYear) {
    this.cachedYear = cachedYear;
    setCachedYearIsSet(true);
    return this;
  }

  public void unsetCachedYear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHEDYEAR_ISSET_ID);
  }

  /** Returns true if field cachedYear is set (has been assigned a value) and false otherwise */
  public boolean isSetCachedYear() {
    return EncodingUtils.testBit(__isset_bitfield, __CACHEDYEAR_ISSET_ID);
  }

  public void setCachedYearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHEDYEAR_ISSET_ID, value);
  }

  public long getCachedFixedDateJan1() {
    return this.cachedFixedDateJan1;
  }

  public Date setCachedFixedDateJan1(long cachedFixedDateJan1) {
    this.cachedFixedDateJan1 = cachedFixedDateJan1;
    setCachedFixedDateJan1IsSet(true);
    return this;
  }

  public void unsetCachedFixedDateJan1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHEDFIXEDDATEJAN1_ISSET_ID);
  }

  /** Returns true if field cachedFixedDateJan1 is set (has been assigned a value) and false otherwise */
  public boolean isSetCachedFixedDateJan1() {
    return EncodingUtils.testBit(__isset_bitfield, __CACHEDFIXEDDATEJAN1_ISSET_ID);
  }

  public void setCachedFixedDateJan1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHEDFIXEDDATEJAN1_ISSET_ID, value);
  }

  public long getCachedFixedDateNextJan1() {
    return this.cachedFixedDateNextJan1;
  }

  public Date setCachedFixedDateNextJan1(long cachedFixedDateNextJan1) {
    this.cachedFixedDateNextJan1 = cachedFixedDateNextJan1;
    setCachedFixedDateNextJan1IsSet(true);
    return this;
  }

  public void unsetCachedFixedDateNextJan1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHEDFIXEDDATENEXTJAN1_ISSET_ID);
  }

  /** Returns true if field cachedFixedDateNextJan1 is set (has been assigned a value) and false otherwise */
  public boolean isSetCachedFixedDateNextJan1() {
    return EncodingUtils.testBit(__isset_bitfield, __CACHEDFIXEDDATENEXTJAN1_ISSET_ID);
  }

  public void setCachedFixedDateNextJan1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHEDFIXEDDATENEXTJAN1_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CACHED_YEAR:
      if (value == null) {
        unsetCachedYear();
      } else {
        setCachedYear((Integer)value);
      }
      break;

    case CACHED_FIXED_DATE_JAN1:
      if (value == null) {
        unsetCachedFixedDateJan1();
      } else {
        setCachedFixedDateJan1((Long)value);
      }
      break;

    case CACHED_FIXED_DATE_NEXT_JAN1:
      if (value == null) {
        unsetCachedFixedDateNextJan1();
      } else {
        setCachedFixedDateNextJan1((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CACHED_YEAR:
      return getCachedYear();

    case CACHED_FIXED_DATE_JAN1:
      return getCachedFixedDateJan1();

    case CACHED_FIXED_DATE_NEXT_JAN1:
      return getCachedFixedDateNextJan1();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CACHED_YEAR:
      return isSetCachedYear();
    case CACHED_FIXED_DATE_JAN1:
      return isSetCachedFixedDateJan1();
    case CACHED_FIXED_DATE_NEXT_JAN1:
      return isSetCachedFixedDateNextJan1();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Date)
      return this.equals((Date)that);
    return false;
  }

  public boolean equals(Date that) {
    if (that == null)
      return false;

    boolean this_present_cachedYear = true;
    boolean that_present_cachedYear = true;
    if (this_present_cachedYear || that_present_cachedYear) {
      if (!(this_present_cachedYear && that_present_cachedYear))
        return false;
      if (this.cachedYear != that.cachedYear)
        return false;
    }

    boolean this_present_cachedFixedDateJan1 = true;
    boolean that_present_cachedFixedDateJan1 = true;
    if (this_present_cachedFixedDateJan1 || that_present_cachedFixedDateJan1) {
      if (!(this_present_cachedFixedDateJan1 && that_present_cachedFixedDateJan1))
        return false;
      if (this.cachedFixedDateJan1 != that.cachedFixedDateJan1)
        return false;
    }

    boolean this_present_cachedFixedDateNextJan1 = true;
    boolean that_present_cachedFixedDateNextJan1 = true;
    if (this_present_cachedFixedDateNextJan1 || that_present_cachedFixedDateNextJan1) {
      if (!(this_present_cachedFixedDateNextJan1 && that_present_cachedFixedDateNextJan1))
        return false;
      if (this.cachedFixedDateNextJan1 != that.cachedFixedDateNextJan1)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_cachedYear = true;
    list.add(present_cachedYear);
    if (present_cachedYear)
      list.add(cachedYear);

    boolean present_cachedFixedDateJan1 = true;
    list.add(present_cachedFixedDateJan1);
    if (present_cachedFixedDateJan1)
      list.add(cachedFixedDateJan1);

    boolean present_cachedFixedDateNextJan1 = true;
    list.add(present_cachedFixedDateNextJan1);
    if (present_cachedFixedDateNextJan1)
      list.add(cachedFixedDateNextJan1);

    return list.hashCode();
  }

  @Override
  public int compareTo(Date other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCachedYear()).compareTo(other.isSetCachedYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCachedYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cachedYear, other.cachedYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCachedFixedDateJan1()).compareTo(other.isSetCachedFixedDateJan1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCachedFixedDateJan1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cachedFixedDateJan1, other.cachedFixedDateJan1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCachedFixedDateNextJan1()).compareTo(other.isSetCachedFixedDateNextJan1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCachedFixedDateNextJan1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cachedFixedDateNextJan1, other.cachedFixedDateNextJan1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Date(");
    boolean first = true;

    sb.append("cachedYear:");
    sb.append(this.cachedYear);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cachedFixedDateJan1:");
    sb.append(this.cachedFixedDateJan1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cachedFixedDateNextJan1:");
    sb.append(this.cachedFixedDateNextJan1);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DateStandardSchemeFactory implements SchemeFactory {
    public DateStandardScheme getScheme() {
      return new DateStandardScheme();
    }
  }

  private static class DateStandardScheme extends StandardScheme<Date> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Date struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CACHED_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cachedYear = iprot.readI32();
              struct.setCachedYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CACHED_FIXED_DATE_JAN1
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cachedFixedDateJan1 = iprot.readI64();
              struct.setCachedFixedDateJan1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CACHED_FIXED_DATE_NEXT_JAN1
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cachedFixedDateNextJan1 = iprot.readI64();
              struct.setCachedFixedDateNextJan1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Date struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CACHED_YEAR_FIELD_DESC);
      oprot.writeI32(struct.cachedYear);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CACHED_FIXED_DATE_JAN1_FIELD_DESC);
      oprot.writeI64(struct.cachedFixedDateJan1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CACHED_FIXED_DATE_NEXT_JAN1_FIELD_DESC);
      oprot.writeI64(struct.cachedFixedDateNextJan1);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DateTupleSchemeFactory implements SchemeFactory {
    public DateTupleScheme getScheme() {
      return new DateTupleScheme();
    }
  }

  private static class DateTupleScheme extends TupleScheme<Date> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Date struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCachedYear()) {
        optionals.set(0);
      }
      if (struct.isSetCachedFixedDateJan1()) {
        optionals.set(1);
      }
      if (struct.isSetCachedFixedDateNextJan1()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCachedYear()) {
        oprot.writeI32(struct.cachedYear);
      }
      if (struct.isSetCachedFixedDateJan1()) {
        oprot.writeI64(struct.cachedFixedDateJan1);
      }
      if (struct.isSetCachedFixedDateNextJan1()) {
        oprot.writeI64(struct.cachedFixedDateNextJan1);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Date struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.cachedYear = iprot.readI32();
        struct.setCachedYearIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cachedFixedDateJan1 = iprot.readI64();
        struct.setCachedFixedDateJan1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.cachedFixedDateNextJan1 = iprot.readI64();
        struct.setCachedFixedDateNextJan1IsSet(true);
      }
    }
  }

}

